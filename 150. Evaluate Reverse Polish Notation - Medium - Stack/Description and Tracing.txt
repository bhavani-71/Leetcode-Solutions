LeetCode #150 - Evaluate Reverse Polish Notation - https://leetcode.com/problems/evaluate-reverse-polish-notation/

You are given an array of strings tokens representing an arithmetic expression in Reverse Polish Notation (RPN).

Evaluate the expression. Valid operators are +, -, *, and /. Each operand may be an integer or another expression.

Division between two integers should truncate toward zero.

Return the result of the evaluation.

Example 1:
Input: tokens = ["2","1","+","3","*"]
Output: 9
Explanation: ((2 + 1) * 3) = 9

Example 2:
Input: tokens = ["4","13","5","/","+"]
Output: 6
Explanation: (4 + (13 / 5)) = 6

Example 3:
Input: tokens = ["10","6","9","3","+","-11","*","/","*","17","+","5","+"]
Output: 22

Explanation:
Reverse Polish Notation is a mathematical notation where every operator follows all of its operands.
To evaluate the expression, use a stack:
- For each token:
  - If it is a number, push it onto the stack.
  - If it is an operator, pop the top two numbers from the stack, apply the operator, and push the result back.
- Division is integer division truncating towards zero.

🪓 Brute Force Approach
🔍 Approach:
Convert the RPN expression to an infix expression and evaluate using standard methods.

🧠 Pseudocode:
Convert tokens to infix expression
Evaluate the infix expression

⏱️ Time Complexity:
O(n) - depends on evaluation method, parsing involved

🧠 Space Complexity:
O(n) - for expression storage

✅ Optimized Approach Using Stack
🔍 Approach:
Use a stack to evaluate in one pass:
- Push numbers to the stack
- When operator found, pop two numbers, apply operator, push result

⏱️ Time Complexity:
O(n) — one pass through tokens

🧠 Space Complexity:
O(n) — stack space

✅ Code Trace
Input: tokens = ["2","1","+","3","*"]
Stack initially: []

- Read "2": push 2 → stack = [2]
- Read "1": push 1 → stack = [2,1]
- Read "+": pop 1, 2 → 2 + 1 = 3 → push 3 → stack = [3]
- Read "3": push 3 → stack = [3,3]
- Read "*": pop 3, 3 → 3 * 3 = 9 → push 9 → stack = [9]

End of tokens → result = 9
