LeetCode #242 - Valid Anagram - https://leetcode.com/problems/valid-anagram/

Given two strings s and t, return true if t is an anagram of s, and false otherwise.

An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.

Example 1:
Input: s = "anagram", t = "nagaram"
Output: true

Example 2:
Input: s = "rat", t = "car"
Output: false

Explanation:
The problem asks to determine whether one string is an anagram of another. This means both strings must contain exactly the same characters with the same frequency, but the order of characters can be different.

For instance, "anagram" and "nagaram" contain the same characters with identical counts, so the output is true. However, "rat" and "car" differ in character composition, so the output is false.

🪓 Brute Force Approach
🔍 Approach:
Check all permutations of string s and see if any matches t (very inefficient).

Alternatively:
- Sort both strings.
- If sorted(s) == sorted(t), then t is an anagram of s.

🧠 Pseudocode:

sort_s = sort(s)
sort_t = sort(t)
if sort_s == sort_t:
    return True
else:
    return False

⏱️ Time Complexity:
O(n log n) — sorting both strings

🧠 Space Complexity:
O(n) — storing sorted strings


✅ Optimized Solution Using Hash Map (Counter)
🔍 Approach:
Use Python's built-in Counter to count frequencies of each character in s and t.

If both frequency dictionaries are equal, then t is an anagram of s.

✅ Code Trace
Input:
s = "anagram"
t = "nagaram"

Counter(s) = {'a': 3, 'n': 1, 'g': 1, 'r': 1, 'm': 1}
Counter(t) = {'n': 1, 'a': 3, 'g': 1, 'r': 1, 'm': 1}

Since Counter(s) == Counter(t), return True

⏱️ Time Complexity:
O(n) — single pass to build frequency counters

🧠 Space Complexity:
O(k) — where k is the number of unique characters in the strings
