LeetCode: 543
Title: Diameter of Binary Tree
Link: https://leetcode.com/problems/diameter-of-binary-tree/

---

🧩 Problem Statement:

Given the root of a binary tree, find the diameter of the tree. The diameter is the length of the longest path between any two nodes in the tree. This path may or may not pass through the root. The length is measured in number of edges.

---

💡 Example:

Input Tree:
       1
      / \
     2   3
    / \
   4   5

Output: 3

Explanation:  
The longest path can be either 4 → 2 → 1 → 3 or 5 → 2 → 1 → 3, both having length 3 edges.

---

🪓 Brute Force Approach:

🔍 Approach:
- For every node, calculate the height of its left and right subtree.
- Calculate diameter as left height + right height.
- Keep track of the maximum diameter found.
- This recomputes height multiple times, causing inefficiency.

⏱️ Time Complexity: O(n²)  
🧠 Space Complexity: O(n) — due to recursion stack in worst case.

---

🚀 Optimized Approach (Single DFS):

✅ Strategy:
- Use DFS to compute the height of each subtree while updating a global maximum diameter.
- For each node:
    - Compute left subtree height.
    - Compute right subtree height.
    - Update diameter = max(diameter, left height + right height).
    - Return node height = 1 + max(left height, right height).

⏱️ Time Complexity: O(n) — each node visited once  
🧠 Space Complexity: O(h) — recursion stack space where h is tree height.

---

✅ Code Trace (Partial):

At node 1:  a
- Left subtree (node 2):  
  - Left child 4: height = 1  
  - Right child 5: height = 1  
  - Diameter at node 2 = 1 + 1 = 2  
  - Height at node 2 = 1 + max(1,1) = 2  

- Right subtree (node 3):  
  - Leaf node, height = 1  

- Diameter at node 1 = left height(2) + right height(1) = 3 (max updated)  
- Height at node 1 = 1 + max(2,1) = 3

Final diameter = 3