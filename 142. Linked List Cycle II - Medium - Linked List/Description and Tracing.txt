LeetCode: 142  
Title: Linked List Cycle II  
Link: https://leetcode.com/problems/linked-list-cycle-ii/

---

🧩 Problem Statement:  
Given the head of a linked list, return the node where the cycle begins. If there is no cycle, return None.

---

💡 Example:  
Input: head = [3,2,0,-4], where tail connects to node index 1 (value 2)  
Output: Node with value 2

---

🪓 Brute Force Approach:  
- Use a hash set to store visited nodes.  
- Traverse the list and check if node is already visited.  
- Return the node if found, else None.  
- Time complexity: O(n), Space complexity: O(n).

---

🚀 Optimized Approach (Floyd’s Cycle Detection):  
- Use two pointers (slow and fast).  
- Move slow by 1 step, fast by 2 steps.  
- If they meet, cycle exists.  
- To find cycle start, initialize a pointer at head and move both pointers one step at a time until they meet again.  
- The meeting point is the cycle start.  
- Time complexity: O(n), Space complexity: O(1).

---

🔍 Code Trace (Example: head = [3,2,0,-4], cycle at node with value 2):

- Initialize slow=3, fast=3

Iteration 1:
slow → 2  
fast → 0

Iteration 2:
slow → 0  
fast → 2

Iteration 3:
slow → -4  
fast → -4  (slow == fast, cycle detected)

Find cycle start:
pointer = head (3), slow = -4

Iteration 1:
pointer → 2  
slow → 2  (pointer == slow → cycle start found)

Return node with value 2
