LeetCode #235 - Lowest Common Ancestor of a Binary Search Tree  
🔗 https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-search-tree/

---

🧩 Problem Statement:

Given a binary search tree (BST), find the lowest common ancestor (LCA) of two given nodes p and q.

The LCA of two nodes p and q in a BST is the lowest node that has both p and q as descendants (a node can be a descendant of itself).

---

💡 Example:

Consider the BST:

          6
         / \
        2   8
       / \ / \
      0  4 7  9
        / \
       3   5

- Input: p = 2, q = 8  
- Output: 6  
Explanation: The LCA of nodes 2 and 8 is 6.

- Input: p = 2, q = 4  
- Output: 2  
Explanation: The LCA of nodes 2 and 4 is 2, since a node can be a descendant of itself.

---

🪓 Approach:

🔍 Idea:  
- Start from the root node.  
- If both p and q values are less than root's value, explore the left subtree.  
- If both p and q values are greater than root's value, explore the right subtree.  
- Otherwise, root is the split point and is the LCA.

This works efficiently because BST properties allow us to discard half of the tree at each step.

⏱️ Time Complexity: O(h), where h is the height of the tree (O(log n) for balanced BST)  
🧠 Space Complexity: O(1) — iterative approach uses constant extra space

---

🚀 Code Explanation:

- Initialize current node as root.  
- Loop until the LCA is found:  
  - If both p and q are smaller than current node, move left.  
  - If both p and q are greater than current node, move right.  
  - Else, current node is the LCA; return it.

---

✅ Trace Example (p=2, q=8 in example tree):

- root = 6  
- p=2 < 6, q=8 > 6 → split point found  
- Return root (6) as LCA.
