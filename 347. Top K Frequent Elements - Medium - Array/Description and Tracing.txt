https://leetcode.com/problems/top-k-frequent-elements/

🧩 Problem Statement:

You are given an integer array `nums` and an integer `k`.  
Your task is to return the `k` most frequent elements from the array.

The order of the output does not matter, but the elements must be the `k` most common.

---

💡 Example:

Input:  
nums = [1, 1, 1, 2, 2, 3], k = 2  

Output:  
[1, 2]  
Explanation:  
- The number `1` appears 3 times.  
- The number `2` appears 2 times.  
- The number `3` appears once.  
Since we want the 2 most frequent elements, we return `[1, 2]`.

---

🪓 Brute Force Approach:

🔍 Approach:
- Count the frequency of each element.
- Sort the elements based on their frequencies in descending order.
- Return the first `k` elements from the sorted list.

⏱️ Time Complexity: O(N log N) due to sorting.  
🧠 Space Complexity: O(N) for storing frequencies.

---

🚀 Optimized Approach (Bucket Sort):

✅ Strategy:
- Count the frequency of each element using `Counter`.
- Create buckets where the index represents frequency, and each bucket holds numbers with that frequency.
- Traverse buckets from high to low, adding numbers to the result until `k` elements are collected.

⏱️ Time Complexity: O(N), where N is the number of elements in `nums`.  
🧠 Space Complexity: O(N) for frequency map and buckets.

---

✅ Code Trace (Partial):

nums = [1, 1, 1, 2, 2, 3], k = 2

Step 1: Frequency Map → {1: 3, 2: 2, 3: 1}

Step 2: Bucket List →
[
 [],          # 0 occurrences
 [3],         # 1 occurrence
 [2],         # 2 occurrences
 [1]          # 3 occurrences
]

Step 3: Traverse buckets from right to left:
- bucket[3] → [1] → result = [1]
- bucket[2] → [2] → result = [1, 2] → collected k = 2 elements → return

Final Result: [1, 2]
