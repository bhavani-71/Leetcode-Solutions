LeetCode #9 - Palindrome Number  
https://leetcode.com/problems/palindrome-number/

🧩 Problem:
Given an integer x, return true if x is a palindrome, and false otherwise.

An integer is a palindrome when it reads the same backward as forward.

📥 Examples:
Input: x = 121  
Output: true

Input: x = -121  
Output: false  
Explanation: From left to right, it reads -121. From right to left, it becomes 121-. Therefore, it's not a palindrome.

Input: x = 10  
Output: false  
Explanation: Reads 01 from right to left. Therefore, it's not a palindrome.

---

✅ Brute Force Approach using String Conversion

🔍 Idea:
- Convert the integer to a string and check if it's equal to its reverse.

🧠 Pseudocode:
- Convert x to string → str_x
- Check if str_x == str_x[::-1]

⏱️ Time Complexity: O(n)  
🧠 Space Complexity: O(n) for string storage

---

✅ Optimized Approach without String Conversion

🔍 Idea:
- Reverse only the second half of the number and compare it with the first half.
- Stop when the reversed half is greater than or equal to the original half (meaning we've processed half the digits).

🧠 Pseudocode:
- If x < 0 or (x ends with 0 and is not 0), return False
- Initialize reversed_half = 0
- While x > reversed_half:
    - reversed_half = reversed_half * 10 + x % 10
    - x = x // 10
- Return True if:
    - x == reversed_half (even length), or
    - x == reversed_half // 10 (odd length)

⏱️ Time Complexity: O(log₁₀(n)) — half of the digits processed  
🧠 Space Complexity: O(1) — constant space used

---

✅ Trace

Input: 1221

Initial x = 1221  
reversed_half = 0

→ reversed_half = 1, x = 122  
→ reversed_half = 12, x = 12

Condition: x == reversed_half → 12 == 12 → True  
✅ Output: True
