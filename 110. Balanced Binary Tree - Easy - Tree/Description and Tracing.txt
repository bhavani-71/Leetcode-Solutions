LeetCode #110 - Balanced Binary Tree  
🔗 https://leetcode.com/problems/balanced-binary-tree/

---

🧩 Problem Statement:

Given a binary tree, determine if it is height-balanced.

A binary tree is height-balanced if the depths of the two subtrees of every node never differ by more than 1.

---

💡 Example:

Input:

        3
       / \
      9  20
         /  \
        15   7

Output: True  
Explanation: The tree is balanced as the height difference between left and right subtree for every node is ≤ 1.

Input:

        1
       / \
      2   2
     / \
    3   3
   / \
  4   4

Output: False  
Explanation: The tree is not balanced because the left subtree has height 3 and right subtree height 1 at root node (difference > 1).

---

🪓 Approach:

🔍 Idea:  
- Recursively compute the height of left and right subtrees.  
- If any subtree is unbalanced (height difference > 1), propagate failure (-1) up.  
- If balanced, return subtree height.  
- Final result depends on whether any unbalanced subtree was found.

⏱️ Time Complexity: O(n), where n is number of nodes (each node visited once)  
🧠 Space Complexity: O(h), where h is height of the tree (due to recursion stack)

---

🚀 Code Explanation:

- Define a helper function `check(node)` that returns the height if balanced or -1 if unbalanced.  
- If node is None, height = 0.  
- Recursively check left and right subtree heights.  
- If either subtree is unbalanced (returns -1), propagate -1.  
- If the height difference > 1, return -1 indicating imbalance.  
- Otherwise, return height of current node = 1 + max(left, right).  
- The tree is balanced if `check(root) != -1`.

---

✅ Trace Example (balanced tree):

For node 3:  
- left subtree (9): height = 1  
- right subtree (20):  
  - left (15): height = 1  
  - right (7): height = 1  
  - height(20) = 1 + max(1,1) = 2  
- height(3) = 1 + max(1,2) = 3  
Height differences are within 1 → balanced.

---

✅ Trace Example (unbalanced tree):

For node 1:  
- left subtree (2):  
  - left (3):  
    - left (4): height =1  
    - right (4): height=1  
    - height(3) = 1 + max(1,1) = 2  
  - right (3): height=1  
  - height(2) = 1 + max(2,1) = 3  
- right subtree (2): height=1  
- height difference = abs(3 - 1) = 2 > 1 → return -1 unbalanced.
