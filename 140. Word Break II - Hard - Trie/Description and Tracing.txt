🔗 LeetCode: 140  
📌 Title: Word Break II  
🔗 Link: https://leetcode.com/problems/word-break-ii

🧩 Problem Statement:  
Given a string `s` and a list of words `wordDict`, return **all possible sentences** where `s` can be segmented into a space-separated sequence of one or more dictionary words.  
Each word in the dictionary can be reused any number of times.

🪓 Brute Force Approach (DFS without memoization):  
🔍 Idea:
- Try every possible prefix of the string `s`.
- If the prefix exists in `wordDict`, recursively try to break the remaining string.
- Combine results by appending the prefix to results of the recursive calls.
- Very inefficient due to repeated work for same substrings.

🔁 Steps:
1. For each index `i`, consider all substrings `s[ind:i+1]`.
2. If substring is in dictionary, recursively solve for `i+1`.
3. Concatenate valid results to form full sentences.

⏱️ Time Complexity: O(2^n) — Exponential due to overlapping recursive calls  
🧠 Space Complexity: O(n) for recursion stack

⚡ Optimized Approach (Trie + DFS + Memoization):  
🔍 Idea:
- Use a Trie to check if substrings exist in `wordDict` efficiently.
- Apply DFS with memoization to avoid recalculating solutions for the same start index.
- Store computed results for each index in a cache.

🔁 Steps:
1. Insert all dictionary words into a Trie.
2. Use DFS from index 0 of the string.
3. At each step, traverse the Trie while matching characters in the string.
4. If a valid word is found, recursively process the remaining substring.
5. Use a `cache` dictionary to store and reuse results for each index.

⏱️ Time Complexity: O(n^2 * m) — where n = len(s), m = number of words in `wordDict`  
🧠 Space Complexity: O(n^2) for memoization and output + Trie space

🔚 Result:
This optimized solution is significantly faster than brute force for large inputs and avoids redundant computation by caching.

🧪 Trace for s = "catsanddog", wordDict = ["cat", "cats", "and", "sand", "dog"]
(root)
 ├── c
 │   └── a
 │       └── t ✔
 │           └── s ✔
 ├── a
 │   └── n
 │       └── d ✔
 ├── s
 │   └── a
 │       └── n
 │           └── d ✔
 └── d
     └── o
         └── g ✔

🐾 Step 1: Build Trie with words: "cat", "cats", "and", "sand", "dog"

📍 Start DFS from index 0:
🔍 Check substrings starting from index 0
1️⃣ chars: 'c' ➡️ in trie  
2️⃣ chars: 'a' ➡️ in trie  
3️⃣ chars: 't' ➡️ "cat" is a word  
  ⤵️ Recurse from index 3
    - Check 's', 'a', 'n', 'd' → "sand" is a word  
      ⤵️ Recurse from index 7  
        - Check 'd', 'o', 'g' → "dog" is a word  
        ✅ Sentence found: "cat sand dog"

🔁 Backtrack to index 0  
4️⃣ chars: 's' ➡️ invalid, stop path  

🔁 Retry prefix: "cats"
- "cats" is a word  
  ⤵️ Recurse from index 4  
    - Check 'a', 'n', 'd' → "and" is a word  
      ⤵️ Recurse from index 7  
        - Check 'd', 'o', 'g' → "dog" is a word  
        ✅ Sentence found: "cats and dog"

✅ Final Result: ["cat sand dog", "cats and dog"]

