LeetCode #57 - Insert Interval - https://leetcode.com/problems/insert-interval/

Given a set of non-overlapping intervals sorted by their start time, insert a new interval into the intervals (merge if necessary).

Return the resulting list of intervals after insertion.

---

Example 1:
Input: intervals = [[1,3],[6,9]], new_interval = [2,5]
Output: [[1,5],[6,9]]

---

Explanation:
You are given a sorted list of non-overlapping intervals.

When inserting a new interval, you must merge all intervals that overlap with it.

The result should also be a sorted list of non-overlapping intervals.

---

🪓 Brute Force Approach
🔍 Approach:
Insert the new interval, then sort all intervals.

Merge overlapping intervals by scanning from left to right.

🧠 Pseudocode:
intervals.append(new_interval)
sort intervals by start time

merged = []
for interval in intervals:
    if merged is empty or interval.start > merged[-1].end:
        merged.append(interval)
    else:
        merged[-1].end = max(merged[-1].end, interval.end)

⏱️ Time Complexity:
O(n log n) due to sorting

🧠 Space Complexity:
O(n) for the merged list

---

✅ Optimized Approach Using One Pass Merge

🔍 Detailed Explanation:

We want to insert a new interval into a list of sorted, non-overlapping intervals and merge any overlaps.

The steps are:

1. Add all intervals that end before the new interval starts.  
   Condition: interval.end < newInterval.start  
   These intervals do not overlap with the new interval, so we keep them as is.

2. Merge all intervals that overlap with the new interval.  
   Condition: interval.start <= newInterval.end  
   For these overlapping intervals, update the new interval’s start to the minimum start of all overlapping intervals, and the end to the maximum end.  
   This effectively merges all overlapping intervals into one.

3. Add the merged new interval to the result list.

4. Add all remaining intervals that start after the new interval ends.  
   Condition: interval.start > newInterval.end  
   These intervals come after the new merged interval and do not overlap, so we add them as they are.

This approach traverses the intervals only once, making it efficient.

⏱️ Time Complexity:
O(n) — single pass through intervals

🧠 Space Complexity:
O(n) — for result list

---

✅ Code Trace for Example:

Input:
intervals = [[1,3],[6,9]]
new_interval = [2,5]

Initialize:
merged_intervals = []
index = 0
total_intervals = 2

Step 1: Add intervals ending before new_interval starts
- intervals[0] = [1,3], ends at 3
- Check if 3 < 2? No → stop adding

merged_intervals = []
index = 0

Step 2: Merge overlapping intervals with new_interval
- intervals[0] = [1,3]
- Check if 1 <= 5? Yes → overlap
- Update new_interval:
  - start = min(2,1) = 1
  - end = max(5,3) = 5
- index = 1

merged_intervals = []
new_interval = [1,5]

- intervals[1] = [6,9]
- Check if 6 <= 5? No → stop merging

Step 3: Append merged new_interval
merged_intervals = [[1,5]]
index = 1

Step 4: Add remaining intervals
- intervals[1] = [6,9]
- Append to merged_intervals

merged_intervals = [[1,5], [6,9]]
index = 2 (end)

Final result: [[1,5], [6,9]]
