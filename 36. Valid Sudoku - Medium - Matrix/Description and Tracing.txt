https://leetcode.com/problems/valid-sudoku/

🧩 Problem Statement:

Given a 9x9 Sudoku board, determine if it is valid according to Sudoku rules.  
The board can be partially filled and empty cells are represented by '.'.

✅ Sudoku Rules:
- Each row must contain the digits 1-9 without repetition.
- Each column must contain the digits 1-9 without repetition.
- Each of the nine 3x3 sub-boxes must contain the digits 1-9 without repetition.

---

💡 Example:

Input Board (partial):

5 3 . | . 7 . | . . .  
6 . . | 1 9 5 | . . .  
. 9 8 | . . . | . 6 .  
------+------+------  
8 . . | . 6 . | . . 3  
4 . . | 8 . 3 | . . 1  
7 . . | . 2 . | . . 6  
------+------+------  
. 6 . | . . . | 2 8 .  
. . . | 4 1 9 | . . 5  
. . . | . 8 . | . 7 9  

Output: True

Explanation:  
No rows, columns, or 3x3 boxes contain duplicates of the digits filled so far.

---

🪓 Brute Force Approach:

🔍 Approach:  
- Check each row for duplicates ignoring '.'  
- Check each column for duplicates  
- Check each 3x3 sub-box for duplicates  
- Return False immediately if any duplicates found, else True after all checks.

⏱️ Time Complexity: O(9*9) = O(81) — constant time due to fixed board size  
🧠 Space Complexity: O(9*9) for sets to track digits in rows, columns, boxes

---

🚀 Optimized Approach (Single Pass):

✅ Strategy:  
- Traverse the board once  
- For each digit (not '.'), check if it is already in the respective row, column, or box set  
- If yes, return False  
- Else, add it to corresponding sets  
- If no conflicts, return True at the end

⏱️ Time Complexity: O(81) — single pass  
🧠 Space Complexity: O(81) — sets for rows, columns, boxes

---

🧩 Complete Trace Explanation (Using a partial example for brevity):

Board (partial):

5 3 . | . 7 . | . . .  
6 . . | 1 9 5 | . . .  
. 9 8 | . . . | . 6 .  

---

Initialization:  
- row_sets = [set(), set(), ..., set()] (9 sets for rows)  
- col_sets = [set(), set(), ..., set()] (9 sets for columns)  
- box_sets = [set(), set(), ..., set()] (9 sets for 3x3 boxes)  

---

Iteration:

🟢 i=0, j=0: digit='5'  
- Check row 0: '5' not present → add '5'  
- Check column 0: '5' not present → add '5'  
- Box index = (0//3)*3 + (0//3) = 0 → box 0: '5' not present → add '5'  
row_sets[0] = {'5'}  
col_sets[0] = {'5'}  
box_sets[0] = {'5'}  

🟢 i=0, j=1: digit='3'  
- row 0: '3' not present → add '3'  
- col 1: '3' not present → add '3'  
- box 0: '3' not present → add '3'  
row_sets[0] = {'5','3'}  
col_sets[1] = {'3'}  
box_sets[0] = {'5','3'}  

⚪ i=0, j=2: digit='.' skip  

🟢 i=0, j=4: digit='7'  
- row 0: '7' not present → add '7'  
- col 4: '7' not present → add '7'  
- box 1: (0//3)*3 + (4//3) = 1 → '7' not present → add '7'  
row_sets[0] = {'5','3','7'}  
col_sets[4] = {'7'}  
box_sets[1] = {'7'}  

🟢 i=1, j=0: digit='6'  
- row 1: '6' not present → add '6'  
- col 0: '6' not present → add '6'  
- box 0: '6' not present → add '6'  
row_sets[1] = {'6'}  
col_sets[0] = {'5','6'}  
box_sets[0] = {'5','3','6'}  

⚪ i=1, j=1: '.' skip  
⚪ i=1, j=2: '.' skip  

🟢 i=1, j=3: digit='1'  
- row 1: '1' not present → add '1'  
- col 3: '1' not present → add '1'  
- box 1: '1' not present → add '1'  
row_sets[1] = {'6','1'}  
col_sets[3] = {'1'}  
box_sets[1] = {'7','1'}  

🟢 i=1, j=4: digit='9'  
- row 1: '9' not present → add '9'  
- col 4: '9' not present → add '9'  
- box 1: '9' not present → add '9'  
row_sets[1] = {'6','1','9'}  
col_sets[4] = {'7','9'}  
box_sets[1] = {'7','1','9'}  

🟢 i=1, j=5: digit='5'  
- row 1: '5' not present → add '5'  
- col 5: '5' not present → add '5'  
- box 1: '5' not present → add '5'  
row_sets[1] = {'6','1','9','5'}  
col_sets[5] = {'5'}  
box_sets[1] = {'7','1','9','5'}  

⚪ i=1, j=6: '.' skip  
⚪ i=1, j=7: '.' skip  
⚪ i=1, j=8: '.' skip  

🟢 i=2, j=1: digit='9'  
- row 2: '9' not present → add '9'  
- col 1: '9' not present → add '9'  
- box 0: '9' not present → add '9'  
row_sets[2] = {'9'}  
col_sets[1] = {'3','9'}  
box_sets[0] = {'5','3','6','9'}  

🟢 i=2, j=2: digit='8'  
- row 2: '8' not present → add '8'  
- col 2: '8' not present → add '8'  
- box 0: '8' not present → add '8'  
row_sets[2] = {'9','8'}  
col_sets[2] = {'8'}  
box_sets[0] = {'5','3','6','9','8'}  

⚪ i=2, j=3 to j=8: '.' or other digits handled similarly  

---

❌ Example of invalid case:  
If at any point a digit is already in the respective set:  
e.g., if at i=0, j=1 digit='5' and '5' already exists in row_sets[0], return False immediately.

---

✅ If all cells checked with no conflicts → return True indicating the Sudoku board is valid.
