LeetCode #53 - Maximum Subarray  
🔗 https://leetcode.com/problems/maximum-subarray/

---

🧩 Problem Statement:

Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.

---

💡 Example:

Input: nums = [-2,1,-3,4,-1,2,1,-5,4]  
Output: 6  
Explanation: The subarray [4,-1,2,1] has the largest sum = 6.

---

🪓 Brute Force Approach:

🔍 Idea:  
- Check every possible subarray and calculate their sums.  
- Keep track of the maximum sum found.

🧠 Pseudocode:  
max_sum = -∞  
for i in range(len(nums)):  
 for j in range(i, len(nums)):  
  current_sum = sum(nums[i:j+1])  
  max_sum = max(max_sum, current_sum)

⏱️ Time Complexity: O(n^2) to O(n^3) depending on sum calculation  
🧠 Space Complexity: O(1)

---

🚀 Optimized Approach — Kadane’s Algorithm:

✅ Strategy:  
- Use a variable `c_sum` to track the current subarray sum.  
- At each element, either start a new subarray from current element or continue the previous subarray by adding the current element.  
- Keep updating the maximum sum found so far.

🧠 Pseudocode:  
c_sum = max_sum = nums[0]  
for i in nums[1:]:  
 c_sum = max(i, c_sum + i)  
 max_sum = max(max_sum, c_sum)  
return max_sum

⏱️ Time Complexity: O(n) — single pass through the array  
🧠 Space Complexity: O(1)

---

✅ Code Trace for nums = [-2,1,-3,4,-1,2,1,-5,4]:

Initialize:  
- max_sum = c_sum = -2

Step 1 (num=1):  
- c_sum = max(1, -2+1) = 1  
- max_sum = max(-2,1) = 1

Step 2 (num=-3):  
- c_sum = max(-3,1-3) = -2  
- max_sum = max(1,-2) = 1

Step 3 (num=4):  
- c_sum = max(4,-2+4) = 4  
- max_sum = max(1,4) = 4

Step 4 (num=-1):  
- c_sum = max(-1,4-1) = 3  
- max_sum = max(4,3) = 4

Step 5 (num=2):  
- c_sum = max(2,3+2) = 5  
- max_sum = max(4,5) = 5

Step 6 (num=1):  
- c_sum = max(1,5+1) = 6  
- max_sum = max(5,6) = 6

Step 7 (num=-5):  
- c_sum = max(-5,6-5) = 1  
- max_sum = max(6,1) = 6

Step 8 (num=4):  
- c_sum = max(4,1+4) = 5  
- max_sum = max(6,5) = 6

Return max_sum = 6
