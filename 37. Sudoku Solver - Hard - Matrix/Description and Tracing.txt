https://leetcode.com/problems/sudoku-solver/

üß© Problem Statement:

Given a partially filled 9x9 Sudoku board, fill the empty cells (denoted by '.') so that the final board represents a valid Sudoku solution. 

A valid Sudoku board satisfies:
- Each row contains digits 1-9 without repetition.
- Each column contains digits 1-9 without repetition.
- Each of the nine 3x3 sub-boxes contains digits 1-9 without repetition.

---

üí° Example:

Input Board (partial):
[
  ["5","3",".",".","7",".",".",".","."],
  ["6",".",".","1","9","5",".",".","."],
  [".","9","8",".",".",".",".","6","."],
  ["8",".",".",".","6",".",".",".","3"],
  ["4",".",".","8",".","3",".",".","1"],
  ["7",".",".",".","2",".",".",".","6"],
  [".","6",".",".",".",".","2","8","."],
  [".",".",".","4","1","9",".",".","5"],
  [".",".",".",".","8",".",".","7","9"]
]

Output Board (one possible solution):
[
  ["5","3","4","6","7","8","9","1","2"],
  ["6","7","2","1","9","5","3","4","8"],
  ["1","9","8","3","4","2","5","6","7"],
  ["8","5","9","7","6","1","4","2","3"],
  ["4","2","6","8","5","3","7","9","1"],
  ["7","1","3","9","2","4","8","5","6"],
  ["9","6","1","5","3","7","2","8","4"],
  ["2","8","7","4","1","9","6","3","5"],
  ["3","4","5","2","8","6","1","7","9"]
]

---

ü™ì Brute Force Approach:

üîç Approach:
- For each empty cell, try all digits 1-9.
- Check if placing a digit is valid by scanning entire row, column, and box.
- Recursively proceed to next cell if valid.
- Backtrack if no digit fits.

‚è±Ô∏è Time Complexity: Very high (worst case 9^(number_of_empty_cells)) due to repeated validity checks.  
üß† Space Complexity: O(9*9) for recursion stack and board.

---

üöÄ Optimized Approach (Backtracking + Sets):

‚úÖ Strategy:
- Use sets to track digits already used in each row, column, and box.
- For each empty cell, try digits 1-9 that are not in respective row, column, and box sets.
- Place digit, update sets, recurse to next cell.
- If no digit fits, backtrack and remove from sets.
- This avoids repeated scanning, improving efficiency.

‚è±Ô∏è Time Complexity: Much improved over brute force, pruning invalid paths early.  
üß† Space Complexity: O(9*9) for recursion and sets.

---

‚úÖ Code Trace (Partial):

üîç Input Board (partial):

[
  ["5","3",".",".","7",".",".",".","."],
  ["6",".",".","1","9","5",".",".","."],
  [".","9","8",".",".",".",".","6","."],
  ["8",".",".",".","6",".",".",".","3"],
  ["4",".",".","8",".","3",".",".","1"],
  ["7",".",".",".","2",".",".",".","6"],
  [".","6",".",".",".",".","2","8","."],
  [".",".",".","4","1","9",".",".","5"],
  [".",".",".",".","8",".",".","7","9"]
]

---

üßµ Detailed Trace (with backtracking):

We start at cell (0,0) and scan left to right, top to bottom.

---

‚≠ï Iteration 1:
Cell (0,0) = "5" (filled) ‚Üí move to (0,1)

‚≠ï Iteration 2:
Cell (0,1) = "3" (filled) ‚Üí move to (0,2)

‚≠ï Iteration 3:
Cell (0,2) = "." (empty) ‚Üí try digits '1' to '9'

- Try '1':
  - Row 0, Column 2, Box 0 sets do not contain '1'
  - Place '1'
  - Update sets: rows[0].add('1'), columns[2].add('1'), boxes[0].add('1')
  - Move to next cell (0,3)

‚≠ï Iteration 4:
Cell (0,3) = "." ‚Üí try digits '1' to '9'

- Try '1':
  - Row 0 contains '1' ‚Üí invalid
- Try '2':
  - Valid, place '2', update sets
  - Move to (0,4)

‚≠ï Iteration 5:
Cell (0,4) = "7" (filled) ‚Üí move to (0,5)

‚≠ï Iteration 6:
Cell (0,5) = "." ‚Üí try digits '1' to '9'

- Try '1':
  - Row 0 contains '1' ‚Üí invalid
- Try '2':
  - Row 0 contains '2' ‚Üí invalid
- Try '3':
  - Row 0 contains '3' ‚Üí invalid
- Try '4':
  - Valid, place '4', update sets
  - Move to (0,6)

...

(Similar placements continue until we reach a conflict.)

---

üîÑ Backtrack triggered:

At some point (e.g., cell (0,7)), no digit 1-9 is valid due to conflicts in row, column, or box.

- Undo last placement (e.g., cell (0,6) digit '4')
- Remove '4' from sets (rows[0], columns[6], boxes[2])
- Try next digit for cell (0,6)

This backtracking allows the algorithm to explore alternative possibilities.

---

‚¨ÖÔ∏è Backtrack example detail:

Cell (0,6):

- Tried '4' ‚Üí led to dead-end
- Backtrack, remove '4'

- Try '5':
  - Not in row 0, col 6, box 2 ‚Üí place '5'
  - Update sets, proceed

---

üîÅ Continue exploring next cells similarly:

The algorithm recursively tries digits, backtracks when stuck, until the board is filled correctly or no solution exists.

---

üèÅ End:

Once row=9 is reached (beyond last row), return True signaling solution found.

The board is modified in-place with a valid Sudoku solution.

---

‚ú® Summary:

- Backtracking is key to undo invalid placements.
- Sets for rows, columns, and boxes enable efficient checks.
- Algorithm explores all possible valid digits for empty cells.
- Backtracking ensures all branches are tried to find solution.
